#!/usr/bin/env python
# -*- Mode: Python; coding: utf-8; indent-tabs-mode: nil; tab-width: 4 -*-

import hashlib, os
from optparse import OptionParser

hashlist = [[32, "md5", hashlib.md5()], [40, "sha1", hashlib.sha1()], [64, "sha256", hashlib.sha256()], [128, "sha512", hashlib.sha512()], [56, "sha224", hashlib.sha224()], [96, "sha384", hashlib.sha384()]]

def hasher(filepath, alghash):
    with open(filepath,'rb') as f:
        for chunk in iter(lambda: f.read(128*alghash.block_size), b''):
             alghash.update(chunk)
    newhash = alghash.hexdigest()
    return newhash

def summer(alghash, filepath):
    alghash = alghash.lower()
    for i in hashlist :
        if alghash == i[1]:
            alghash = i[2]
            break
    newhash = hasher(filepath, alghash)
    return newhash

def checkfile(filepath, orighash):
    alghash = ""
    for i in hashlist :
        if len(orighash) == i[0]:
            alghash = i[2]
            break

    if alghash != "":
        newhash = hasher(filepath, alghash)
        return orighash, newhash, alghash

    else:
        print "\nDésolé je ne reconnai pas l'algorithme de hachage utilisé.\nVeuillez vérifier la somme de contrôle fournit.\n"
        exit()

parser = OptionParser()
parser.add_option("-v", "--verbose",
                  action="store_true",
                  dest="verbose",
                  default=False,
                  help="show verbose informations on file checking")

#~ parser.add_option("-q", "--quiet",
                  #~ action="store_false", dest="verbose",
                  #~ help="don't print status messages to stdout")

parser.add_option("-a", "--algorithm",
                  dest="algorithm",
                  help="chose a algorithm between md5, sha1, sha224, sha256, sha384, sha512")

parser.add_option("-f", "--file",
                  dest="filepath",
                  help="file to check")

parser.add_option("-s", "--sum",
                  dest="hashsum",
                  help="original hash sum to file to check")

#~ parser.add_option("-t", "--text",
                  #~ dest="textfile",
                  #~ help="Use a text file with hashes of multi files")

(options, args) = parser.parse_args()

if options.filepath and not options.algorithm:
    if options.hashsum:
        orighash = options.hashsum
    else:
        orighash = raw_input("Entrez la somme de contrôle: ")
    
    orighash = orighash.lower()
    
    orighash, newhash, alghash = checkfile(options.filepath, orighash)

    if options.verbose:
        print u"\nVérification de " + options.filepath + u" :\nSomme donnée\t\t: " + orighash + u"\nSomme calculée\t\t: " + newhash + u"\nAlgorithme utilisé\t: " + str(alghash)

    if orighash == newhash:
        print options.filepath + ": OK"

    else:
        print options.filepath + u": ÉCHEC\nAVERTISSEMENT : la somme de contrôle ne concorde pas"


elif options.filepath and options.algorithm:
    newhash = summer(options.algorithm, options.filepath)

    print newhash + "\t" + options.filepath

else:
    parser.print_help()
