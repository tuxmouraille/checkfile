#!/usr/bin/env python
# -*- Mode: Python; coding: utf-8; indent-tabs-mode: nil; tab-width: 4 -*-

import hashlib, os
from optparse import OptionParser

def md5sum(filename):
    md5 = hashlib.md5()
    with open(filename,'rb') as f:
        for chunk in iter(lambda: f.read(128*md5.block_size), b''):
             md5.update(chunk)
    return md5.hexdigest()

def sha1sum(filename):
    sha1 = hashlib.sha1()
    with open(filename,'rb') as f:
        for chunk in iter(lambda: f.read(128*sha1.block_size), b''):
             sha1.update(chunk)
    return sha1.hexdigest()

def sha224sum(filename):
    sha224 = hashlib.sha224()
    with open(filename,'rb') as f:
        for chunk in iter(lambda: f.read(128*sha224.block_size), b''):
             sha224.update(chunk)
    return sha224.hexdigest()

def sha256sum(filename):
    sha256 = hashlib.sha256()
    with open(filename,'rb') as f:
        for chunk in iter(lambda: f.read(128*sha256.block_size), b''):
             sha256.update(chunk)
    return sha256.hexdigest()

def sha384sum(filename):
    sha384 = hashlib.sha384()
    with open(filename,'rb') as f:
        for chunk in iter(lambda: f.read(128*sha384.block_size), b''):
             sha384.update(chunk)
    return sha384.hexdigest()

def sha512sum(filename):
    sha512 = hashlib.sha512()
    with open(filename,'rb') as f:
        for chunk in iter(lambda: f.read(128*sha512.block_size), b''):
             sha512.update(chunk)
    return sha512.hexdigest()

def checkfile(filepath):

    if options.hashsum:
        orighash = options.hashsum
    else:
        orighash = raw_input("Entrez la somme de contrôle: ")

    if len(orighash) == 32:
        alghash = "md5"
        newhash = md5sum(filepath)

    elif len(orighash) == 40:
        alghash = "SHA1"
        newhash = sha1sum(filepath)

    elif len(orighash) == 56:
        alghash = "SHA224"
        newhash = sha224sum(filepath)

    elif len(orighash) == 64:
        alghash = "SHA256"
        newhash = sha256sum(filepath)

    elif len(orighash) == 96:
        alghash = "SHA384"
        newhash = sha384sum(filepath)

    elif len(orighash) == 128:
        alghash = "SHA512"
        newhash = sha512sum(filepath)

    else:
        print "\nDésolé je ne reconnai pas l'algorithme de hachage utilisé.\nVueillez vérifier la somme de contrôle fournit.\n"
        exit()

    return orighash, newhash, alghash



parser = OptionParser()
parser.add_option("-v", "--verbose",
                  action="store_true", dest="verbose", default=False,
                  help="Show verbose informations on file checking")

#~ parser.add_option("-q", "--quiet",
                  #~ action="store_false", dest="verbose",
                  #~ help="don't print status messages to stdout")

parser.add_option("-f", "--file",
                  dest="filename",
                  help="File to check")

parser.add_option("-s", "--sum",
                  dest="hashsum",
                  help="Original hash sum to file to check")

parser.add_option("-t", "--text",
                  dest="textfile",
                  help="Use a text file with hashes of multi files")

(options, args) = parser.parse_args()

if options.filename:
    orighash, newhash, alghash = checkfile(options.filename)

    if options.verbose:
        print "\nVérification de " + options.filename + " :\nSomme donnée\t\t: " + orighash + "\nSomme calculée\t\t: " + newhash + "\nAlgorithme utilisé\t: " + alghash

    if orighash == newhash:
        print "\n\t==> Le fichier est bon.\n"

    else:
        print "\n\t==> Le fichier n'est pas bon.\n"


else:
    parser.print_help()
